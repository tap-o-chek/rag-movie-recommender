from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, CommandHandler, filters, ContextTypes
from deep_translator import GoogleTranslator
from sentence_transformers import SentenceTransformer
from langdetect import detect
import faiss
import numpy as np
import pandas as pd


df = pd.read_pickle(r"C:\my_projects\rag-movie-recommender\movies_with_embeddings.pkl")
model = SentenceTransformer('paraphrase-multilingual-MiniLM-L12-v2')

# FAISS-–∏–Ω–¥–µ–∫—Å
d = len(df['embedding'][0])
index = faiss.IndexFlatL2(d)
index.add(np.vstack(df['embedding'].values))

# –ø–µ—Ä–µ–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞
def translate_text(text, target='ru'):
    try:
        return GoogleTranslator(source='auto', target=target).translate(text)
    except Exception as e:
        return text  # –µ—Å–ª–∏ –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª

# –ø–æ–∏—Å–∫–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def search_similar_movies(query, top_k=5):
    query_vector = model.encode([query])
    distances, indices = index.search(query_vector, top_k)
    
    try:
        query_lang = detect(query)
    except:
        query_lang = 'en'
    
    results = []
    for idx, dist in zip(indices[0], distances[0]):
        row = df.iloc[idx]
        title = row['title']
        overview = row['overview']
        if query_lang == 'ru':
            overview = translate_text(overview, target='ru')
        results.append(f"üé¨ *{title}*\n{overview}\n(–°—Ö–æ–¥—Å—Ç–≤–æ: {1 - dist:.2f})\n")
    return "\n".join(results)

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text
    waiting_msg = await update.message.reply_text("üîé –ü–æ–¥–±–∏—Ä–∞—é —Ñ–∏–ª—å–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    answer = search_similar_movies(query)
    
    await waiting_msg.delete()
    await update.message.reply_text(answer, parse_mode="Markdown")


# –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—ã–π –±–æ—Ç —Ñ–∏–ª—å–º–æ–≤.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ ‚Äî –∂–∞–Ω—Ä, –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "üîç *–¥–µ—Ç–µ–∫—Ç–∏–≤ –≤ —Å–Ω–µ–≥–∞—Ö*\n"
        "üîç *–∫–æ–º–µ–¥–∏—è —Å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–∏*\n"
        "üîç *—Ä–æ–±–æ—Ç—ã –∏ –∫–æ—Å–º–æ—Å*\n\n"
        "–ê —è –ø–æ–¥–±–µ—Ä—É –¥–ª—è —Ç–µ–±—è —Ñ–∏–ª—å–º—ã –∏ —Ä–∞—Å—Å–∫–∞–∂—É, –ø–æ—á–µ–º—É –æ–Ω–∏ –ø–æ–¥—Ö–æ–¥—è—Ç)",
                parse_mode='Markdown'
    )

if __name__ == '__main__':
    app = ApplicationBuilder().token("7909924378:AAHmguToHsEyRAJS5qihCCDV91Ww8-RxMjE").build()
    app.add_handler(CommandHandler('start', start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
    app.run_polling()