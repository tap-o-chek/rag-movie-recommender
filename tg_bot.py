from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, MessageHandler, CommandHandler, CallbackQueryHandler, filters, ContextTypes
from deep_translator import GoogleTranslator
from sentence_transformers import SentenceTransformer
from langdetect import detect
import asyncio
from telegram import BotCommand
import faiss
import numpy as np
import pandas as pd


df = pd.read_pickle(r"C:\my_projects\rag-movie-recommender\movies_with_embeddings.pkl")
model = SentenceTransformer('paraphrase-multilingual-MiniLM-L12-v2')

# FAISS-–∏–Ω–¥–µ–∫—Å
d = len(df['embedding'][0])
index = faiss.IndexFlatL2(d)
index.add(np.vstack(df['embedding'].values))

def search_similar_movies(query, shown_indices=set(), top_k=5):
    lang = detect(query)

    # –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
    if lang != 'en':
        try:
            translated_query = GoogleTranslator(source='auto', target='en').translate(query)
        except Exception:
            translated_query = query
    else:
        translated_query = query

    query_vector = model.encode([translated_query])
    distances, indices = index.search(query_vector, top_k + len(shown_indices))

    results = []
    new_indices = []

    for idx, dist in zip(indices[0], distances[0]):
        if idx in shown_indices:
            continue
        row = df.iloc[idx]
        overview = row['overview']
        
        # –ø–µ—Ä–µ–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if lang != 'en':
            try:
                overview = GoogleTranslator(source='en', target=lang).translate(overview)
            except Exception:
                pass

        results.append(
            f"üé¨ *{row['title']}*\n{overview}\n(–°—Ö–æ–¥—Å—Ç–≤–æ: {1 - dist:.2f})\n"
        )
        new_indices.append(idx)
        if len(results) >= top_k:
            break

    return "\n".join(results), new_indices

# –ø—Ä–∏ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø ‚Äî —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—ã–π –±–æ—Ç —Ñ–∏–ª—å–º–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ò–ò.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ ‚Äî –∂–∞–Ω—Ä, –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "üîç *–¥–µ—Ç–µ–∫—Ç–∏–≤ –≤ —Å–Ω–µ–≥–∞—Ö*\n"
        "üîç *–∫–æ–º–µ–¥–∏—è —Å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–∏*\n"
        "üîç *—Ä–æ–±–æ—Ç—ã –∏ –∫–æ—Å–º–æ—Å*\n\n"
        "–ê —è –ø–æ–¥–±–µ—Ä—É –¥–ª—è —Ç–µ–±—è —Ñ–∏–ª—å–º—ã –∏ –æ–±—ä—è—Å–Ω—é, –ø–æ—á–µ–º—É –æ–Ω–∏ –ø–æ–¥—Ö–æ–¥—è—Ç üé¨",
        parse_mode='Markdown'
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text
    await update.message.reply_text("üîé –ü–æ–¥–±–∏—Ä–∞—é —Ñ–∏–ª—å–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    context.user_data['query'] = query
    context.user_data['shown_indices'] = []

    answer, new_indices = search_similar_movies(query, shown_indices=set())
    context.user_data['shown_indices'].extend(new_indices)

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ï—â—ë 5 —Ñ–∏–ª—å–º–æ–≤", callback_data="more")]
    ])
    await update.message.reply_text(answer, parse_mode="Markdown", reply_markup=keyboard)

# –∫–Ω–æ–ø–∫–∞ "–ï—â—ë"
# üîÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ï—â—ë"
async def more_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = context.user_data.get('query')
    shown = set(context.user_data.get('shown_indices', []))

    if not query:
        await update.callback_query.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")
        return

    await update.callback_query.answer("üîÑ –ü–æ–¥–±–∏—Ä–∞—é –µ—â—ë...")

    answer, new_indices = search_similar_movies(query, shown_indices=shown)
    context.user_data['shown_indices'].extend(new_indices)

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ï—â—ë 5 —Ñ–∏–ª—å–º–æ–≤", callback_data="more")]
    ])
    
    # ‚¨ÖÔ∏è –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º send_message –≤–º–µ—Å—Ç–æ edit_message_text
    await update.effective_chat.send_message(answer, parse_mode="Markdown", reply_markup=keyboard)



if __name__ == '__main__':
    app = ApplicationBuilder().token("7909924378:AAHmguToHsEyRAJS5qihCCDV91Ww8-RxMjE").build()

    # –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ 
    async def setup_commands():
        commands = [
            BotCommand("start", "–ù–∞—á–∞—Ç—å/–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),\
        ]
        await app.bot.set_my_commands(commands)

    # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥
    asyncio.get_event_loop().run_until_complete(setup_commands())

    # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler('start', start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(more_callback, pattern="more"))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()